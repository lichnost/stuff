Rules

This is a game very similar to the popular single-player game Snake. It's otherwise known as Tron. In the basics, it's a very simple game, but if you want to create a great bot you'll have to predict your opponent's every move, which can prove quite an interesting challenge.
Light Riders rules

In Light Riders the goal is to stay alive longer than your opponent. Both players move around in the same field, moving one space each round. The field is a square grid, 16 columns wide and 16 rows high. The bot can move in one of four directions: UP, DOWN, LEFT, or RIGHT, but it can't move the the direction opposite of it's current direction. So when moving UP, it can't move DOWN that round. If a bot returns something to the game engine that is not correct, it will be visible when watching the game and the bot's move will automatically be the same as the last move.

Where players move, a wall of light is left behind on the field permanently. This wall is impassable for both players. Hitting this wall, or hitting the outer wall of the field, means the player loses. The last player alive wins the game. If both players crash at the same time, it's a draw. Because the walls both players leave behind are permanent and because each player must move each round, the game will end by definition.

For this competition, the board size will be 16x16 permanently. You can optimize your bot around these dimensions if you want.
Starting positions

The starting positions of the players are semi-random. To determine the starting position for player0, the engine selects a coordinate somewhere between x=1, x=6, y=1 and y=14 (inclusive). So this means any coordinate on the left half of the grid, not including all edges. The starting position of player1 is then chosen by vertically mirroring the starting position of player0.
Technical details

You get an initial maximally filled timebank of 10 seconds and each time a move is requested 200ms will be added to your timebank. The engine will give the amount of time left in your timebank each time it asks your bot for a move. If your bot does not respond before the timeout, it will keep moving in the current direction. Bots that do not output anything at all, a.k.a. fail their input test, can not be placed in the ranked matches.

When uploading your bot, you must upload a .zip file. Make sure you either put the source files directly in the compressed folder, or in their respective class folders. So do not put a folder with the source files in the compressed folder, or your bot won't compile.

Game engine source

The game engine source is available on our GitHub page! Use it for local testing if you want.
Start from scratch

A bot can be created from scratch in any of the supported languages for this competition (see above). If you want a bit of the work already done, download the starterbot for your preferred language if it's available. All communication between your bot and the engine works through the standard input and output channels. The error channel can be used for logging. The protocol used for communication can be found below, in the section Communicating with the game engine.
A simple example

import java.util.Scanner;

public class MyBot {

    private Scanner scan = new Scanner(System.in);

    public void run() {
        while (scan.hasNextLine()) {
            String line = scan.nextLine();

            if (line.length() == 0) continue;

            String[] parts = line.split(" ");
            switch (parts[0]) {
                case "settings":
                    // store game settings
                    break;
                case "update":
                    // store game updates
                    break;
                case "action":
                    System.out.println("up");
                    System.out.flush();
                    break;
                default:
                    // error
            }
        }
    }

    public static void main(String[] args) {
        (new MyBot()).run();
    }
}

This is a very simple example of a working bot in Java. It reads the engine's output and only does something when an action is requested by the engine: it will move up. This bot obviously will crash pretty quickly, but technically it is doing the correct stuff.
Communicating with the game engine

The communication between your bot and the engine goes via the standard input and output channels. Every single line the engine gives is a specific piece of information or a request. The response from your bot should also be just one line. We follow a standardized API. There are three types of lines, in the following format:

    settings [type] [value]

    Given only at the start of the game. Contains a game setting.

    update [player] [type] [value]

    This is an update of the game state. [player] indicates what bot the update is about, but could also be game to indicate a general update.

    action [type] [time]

    Indicates a request for an action.

Below is an overview of all possible communication between the engine and the bot.
Communication from engine to bot

    settings timebank t

    Maximum time in milliseconds that your bot can have in its time bank

    settings time_per_move t

    Time in milliseconds that is added to your bot's time bank each move

    settings player_names [p,...]

    A list of all player names in this match, including your bot's name

    settings your_bot p

    The name of your bot for this match

    settings your_botid i

    The ID number of your bot as used in the field updates (same number as in player name)

    settings field_width i

    The number of columns on the board

    settings field_height i

    The number of rows on the board

    update game round i

    The current round

    update game field [c,...]

    The current field, each coordinate separated by commas, from top left to bottom right

    action move t

    Request for a direction to move, should be answered within t milliseconds

Communication from bot to engine

    m

    The move your bot wants to make

Each i can be any integer. Each p represents the name of a bot (as far as the engine is concerned) and can be either player0 or player1 for this competition. t represents a time in milliseconds. A c is a cell in the playing field. This can be a . for empty, x for a wall, or 0 or 1, for one of the players (given by your_botid). An update of the playing field separates each cell by a comma, from top-left to bottom-right. Finally, m represents the bot's output, which can be up, down, left, or right.

The engine will always try to perform the action given by the output of your bot. In case the action is not valid in the current game situation, or when the output can't be parsed at all, the engine make the bot move in its current direction.

Input and output between the bot and the engine go via the standard input and output channels, but you can use the error output channel to print stuff in the error dump of your game. This will not be read by the engine and can be used for debugging.
By example

The game itself is not very difficult to understand, but to make it a bit more clear what the inputs and outputs look like we're providing an example. You can find this in the dump of any of your own games as well.

settings timebank 10000
settings time_per_move 200
settings player_names player0,player1
settings your_bot player0
settings your_botid 0
settings field_width 16
settings field_height 16

These are the settings of the game. This information is sent at the start of a match only. Your bot now knows the timebank settings, the player names, it's own id number, and the field dimensions. Continuing with the rest of the input/output:

update game round 0
update game field
action move 10000

Your bot gets the round number and what the field looks like. Both bots are in their starting position. These updates are given each time before an action is requested. In the last line the engine requests your bot's move.

up

This is your bot's move, namely moving up. In the next field update, we should see that the bot has moved up, and that there is a wall where it previously was. Meanwhile, the opponent has also moved, so we should also see what the opponent has done.

update game round 1
update game field .,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,0,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,x,.,.,.,.,.,.,.,.,x,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.
action move 10000

Your bot gets another round update and the field update. If you look closely, you see that the bot has indeed moved up and that the opponent has moved down. There are walls where the bots were in the previous round. The engine asks the bot for another action in the last line and after that the updated field will be sent again and new action is requested again. This is repeated until game end. Now you are all set to create your very own Light Riders bot!
